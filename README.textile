h1. Montage Web Framework

_Build your website through the power of the montage._

Montage is an ultra-lightweight MVC framework that does not try to be all things to all people so it can avoid the heft of other frameworks. The goal is to make Montage ultra-flexible yet still super-lightweight.

h2. Getting Started

h3. Terminology

Before you dive in you should be familiar with certain terms Montage uses.

* *App* - This is your web application you are going to build using Montage
* *Controller* - This is the consumer facing part of your application that will handle the requests from your visitors. For example, The default or world accessible part of your site might use the _frontend_ controller. The administration interface might use the _backend_ controller. And API calls might use the _api_ controller.
* *Model* - all your supporting classes/libraries. Most frameworks only use the _model_ to refer to Database classes, Montage uses the _model_ to refer to all supporting classes.
* *View* - what you will actually show visitors.

h3. The directory structure of a Montage web application

<pre>
app_path/
  cache/
  controller/
  model/
  plugins/
  settings/
  view/
  web/
</pre>

* *cache* - Temporary storage for Montage. Montage will cache things to this directory for quicker access. This directory can be cleared at any time without problems.

* *controller* - All your controllers go in this directory in their respective sub directories (e.g., if you are using the frontend controller, then all your frontend controller classes will go in the <code>controller/frontend</code> directory).

* *model* - all supporting classes/libraries go in this directory.

* *settings* - all configuration files go in this directory.

* *view* - all templates should go in this directory.

* *web* - this is the Montage request root directory, it contains the index.php that Montage will use to service all web requests.

h3. Constants that can be set by you

Montage, like any framework, has a chicken or egg problem. Montage needs to know certain things in order to start, but those things are technically _settings_ that should be set using Montage Settings. But a Montage Settings instance can't be created without certain information (like the path to the montage framework). With that in mind, here are the constants that Montage checks in its <code>start.php</code> file:

* *MONTAGE_DEBUG* - whether Montage should print debug output to the screen. Defaults to *true*.
* *MONTAGE_CHARSET* - defaults to UTF-8.
* *MONTAGE_TIMEZONE* - defaults to UTC.
* *MONTAGE_PATH* - the root directory of the Montage Framework, can be auto-discovered.
* *MONTAGE_APP_PATH* - the root directory of the Montage application, can be auto-discovered.
* *MONTAGE_CONTROLLER* - The controller this request should use. *Must be set by user*.
* *MONTAGE_ENVIRONMENT* - The environment this request should use. *Must be set by user*.

h3. Customizing a Montage Application

You can set app specific classes for some of the core classes by just extending them. For example, to create an Application specific request class, you would just do:

<pre>
class request extends montage_request {
  // place application specific methods here
}//class
</pre>

That's all there is to it. 

The core classes You can extend: 
* <code>montage_request</code>
* <code>montage_response</code>
* <code>montage_settings</code>
* <code>montage_filter</code>

All your controller classes should extend: 
* <code>montage_controller</code>

All your start classes should extend:
* <code>montage_start</code>

Need to have certain settings set for your application? No problem, Montage has you covered, you just need to extend <code>montage_start</code> in your settings directory.

For _global_ settings, just create a start class with the name *app*:

<pre>
// [MONTAGE_APP_PATH]/settings/start_app_class.php
class app extends montage_start {
  function start(){
  
   // all the custom application startup settings go here
  
  }//method
}//class
</pre>

You can also have a _controller_ startup class and an _environment_ startup class. The start classes follow a defined precedence order: app, controller, environment, and plugin. That way, your controller can override any app-wide settings, and your environment can override any app-wide or controller-wide settings.

h2. Plugins

h3. Directory structure of a plugin:

<pre>
app_path/
  plugins/
   plugin_name/
     model/
     settings/
</pre>

in the Plugin's settings directory you can have a _plugin_name_ startup class. For example, if your plugin was named *foo*, then your startup class would be: 

<pre>
class foo extends montage_start {
  function start(){
    // place all plugin initialization code here
  }//method
}//class
</pre>

The model directory should contain the plugin's core classes.