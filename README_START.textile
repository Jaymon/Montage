h1. Getting Started With Montage

Getting Montage to successfully run is easy, in your main script (usually web/index.php) you just need to set some constants:

<pre>
// these are the constants the index should set...
define('MONTAGE_CONTROLLER','controller_name'); // usually something like "frontent"
define('MONTAGE_DEBUG',true); // true to turn debugging on, false to turn it off
define('MONTAGE_ENVIRONMENT','dev'); // what environment to run the app in (eg, "dev", "prod"
define('MONTAGE_APP_PATH','root/dir/of/your/app');
</pre>

The <code>MONTAGE_APP_PATH</code> constant is the directory where your app's <code>web</code>, <code>model</code>, <code>controller</code>, and <code>view</code> folders reside.

After your constants are set, then you just need to include the Montage start script:

<pre>
include('/path/to/montage/root/dir/start.php');
</pre>

And Montage will take care of the rest.

h2. Include Some Controllers to Handle the Requests

After you run Montage you probably noticed Montage just threw an error and quit, that's because you need to define some controllers that Montage can direct the request to.

<pre>
class index extends montage_controller {

  protected function handleIndex(){
    echo "Hello world!";
  }//method

}//class
</pre>

Now, refresh the page, you should see <code>Hello world!</code>. That's because Montage used the <code>index</code> controller to handle the request.

By default, Montage redirects all requests using this formula:

<pre>
http://app.com/controller_class/method/$field
</pre>

that means, to handle this request:

<pre>
http://app.com/foo/bar/baz
</pre>

You could create a class like this:

<pre>
class foo extends montage_controller {

  protected function handleBar($baz){
    echo $baz;
  }//method

}//class
</pre>

Montage also cascades nicely. That means if it can't find a matching method, then it will call the controller's <code>handleIndex</code> method if it is defined. If it can't find a matching class, then it will call the index controller's <code>handleClass</code> method, if that doesn't exist, then it will call the index controller's <code>handleIndex</code> method.

Their are two controller classes Montage will look for by default:

* <code>index</code> - to handle default requests
* <code>error</code> - to handle all error states

The <code>error</code> controller's methods correspond to the name of the exception they will be handling, (eg, <code>handleRuntimeException</code> will handle all raised RuntimeException exceptions), with <code>handleIndex</code> being the generic method for all exceptions that don't have a custom method to handle them.

h2. Custom Settings

Montage doesn't have any config files, but any app settings can be set using Montage's start classes, which are called in a specific order:

# Global
# environment
# plugins
# controller

the global class is named "app"

<pre>
class app extends montage_start {

  protected function start(){
    // do global app configuration here
  }//method

}//class
</pre>

The environment's start class name is the same value that the <code>MONTAGE_ENVIRONMENT</code> constant contains. Likewise, the controller's start class name is the same as the value that the <code>MONTAGE_CONTROLLER</code> constant contains.

Since the start files cascade, you can have different environments use different database credentials, etc..

Usually, the start files will use the <code>montage_settings</code> instance to store values:

<pre>
$settings = montage::getSettings();
$settings->setField('foo','bar');
<pre>

Now, anywhere in your app, you could:

<pre>
$settings = montage::getSettings();
$foo = $settings->getField('foo','bar');
echo $foo; // -> 'bar'
<pre>